# Thomas Lockwood
# Dr. Goddard
# Research for Collatz


def collatz(n):
    v = []
    cycle = 0
    while n not in v:     
        v.append(n)
        if n%4 == 0:
            n = n/4
        elif n%4 == 1:
            n = 5*n+3
        elif n%4 == 2:
            n = 5*n+2
        elif n%4 == 3:
            n = 5*n+1
        cycle += 1
    return(n, cycle)

m = []
for i in range(1,10000):
    x, y = collatz(i)
    m.append(x)
print(set(m))

# Mod 3 case:
'''
0_3 -> n/3
1_3 -> 4n + 2
2_3 -> 4n + 1
Residues = [1, 2, 3, 6, 7, 9, 10, 78, 141, 14, 47, 189, 19,
21, 105, 57, 26, 63, 42, 30, 35])

0_3 -> n/3
1_3 -> 4n + 5
2_3 -> 4n + 4
Residues = [1, 3, 1284, 9, 1931, 2576, 3252, 2436, 2717, 572, 1824, 5793,960, 18336,
1447, 3624, 428, 7728, 1716, 6453, 1208, 3060, 1084, 320, 6112, 10308, 455,
1612, 717, 340, 1365, 8151, 4836, 608, 812, 2151, 1020, 4583, 3436, 239, 2292, 4341, 10872, 764]

0_3 -> n/3
1_3 -> 4n+8
2_3 -> 4n+4
Residues = [132, 147, 279, 28, 31, 35, 40, 44, 49, 183, 56, 315,
61, 68, 204, 77, 84, 93, 231, 105, 168, 120, 252]
'''

# Mod 4 case:
'''
0_M -> n/M
1_M -> (M+1)*n + M-1
2_M -> (M+1)*n + M-2
...
M-1_M -> (M+1)*n + 1
seems to work.
'''
